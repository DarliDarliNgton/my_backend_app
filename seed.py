from app import create_app
from models import db, User, Category, Product, Order, OrderItem
from datetime import datetime, timedelta
import random

app = create_app()


def seed_database():
    with app.app_context():
        print("üîÑ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db.drop_all()
        db.create_all()
        print("‚úÖ –ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        admin = User(
            email="admin@shop.com",
            first_name="Admin",
            last_name="User",
            phone="+1234567890",
            is_admin=True,
            created_at=datetime.utcnow()
        )
        admin.set_password("admin123")

        customer1 = User(
            email="customer1@shop.com",
            first_name="John",
            last_name="Doe",
            phone="+1987654321",
            created_at=datetime.utcnow()
        )
        customer1.set_password("customer123")

        customer2 = User(
            email="customer2@shop.com",
            first_name="Jane",
            last_name="Smith",
            phone="+1122334455",
            created_at=datetime.utcnow()
        )
        customer2.set_password("customer123")

        db.session.add_all([admin, customer1, customer2])
        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {User.query.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        categories_data = [
            {"name": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", "slug": "cpu", "description": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ü–ö –∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"},
            {"name": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", "slug": "gpu",
             "description": "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–ª—è –∏–≥—Ä –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"},
            {"name": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã", "slug": "motherboard", "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç—ã –¥–ª—è —Å–±–æ—Ä–∫–∏ –ü–ö"},
            {"name": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", "slug": "ram", "description": "–ú–æ–¥—É–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ DDR4 –∏ DDR5"},
            {"name": "SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏", "slug": "ssd",
             "description": "–¢–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä–æ–≤"},
            {"name": "–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è", "slug": "psu", "description": "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"},
            {"name": "–ö–æ—Ä–ø—É—Å–∞", "slug": "cases", "description": "–ö–æ—Ä–ø—É—Å–∞ –¥–ª—è –ü–ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–æ–≤"},
            {"name": "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ", "slug": "cooling", "description": "–°–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –∏ –∫–æ—Ä–ø—É—Å–æ–≤"},
            {"name": "–ú–æ–Ω–∏—Ç–æ—Ä—ã", "slug": "monitors",
             "description": "–ú–æ–Ω–∏—Ç–æ—Ä—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"},
            {"name": "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è", "slug": "peripherals",
             "description": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º—ã—à–∏, –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"},
        ]

        categories = []
        for cat_data in categories_data:
            category = Category(
                name=cat_data["name"],
                slug=cat_data["slug"],
                description=cat_data["description"]
            )
            categories.append(category)
            db.session.add(category)

        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {Category.query.count()} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        print("üõí –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        products_data = [
            {
                "name": "Intel Core i9-13900K",
                "description": "24 —è–¥—Ä–∞ (8P+16E), –¥–æ 5.8 –ì–ì—Ü, LGA 1700",
                "price": 58990,
                "stock": 15,
                "category": "cpu",
                "specifications": {
                    "socket": "LGA 1700",
                    "cores": "24 (8P+16E)",
                    "threads": 32,
                    "base_clock": "3.0 –ì–ì—Ü",
                    "max_clock": "5.8 –ì–ì—Ü",
                    "tdp": "125 –í—Ç",
                    "l3_cache": "36 –ú–ë"
                }
            },
            {
                "name": "AMD Ryzen 9 7950X",
                "description": "16 —è–¥–µ—Ä, 32 –ø–æ—Ç–æ–∫–∞, –¥–æ 5.7 –ì–ì—Ü, AM5",
                "price": 64990,
                "stock": 10,
                "category": "cpu",
                "specifications": {
                    "socket": "AM5",
                    "cores": 16,
                    "threads": 32,
                    "base_clock": "4.5 –ì–ì—Ü",
                    "max_clock": "5.7 –ì–ì—Ü",
                    "tdp": "170 –í—Ç",
                    "l3_cache": "64 –ú–ë"
                }
            },
            {
                "name": "NVIDIA GeForce RTX 4090",
                "description": "24 –ì–ë GDDR6X, 16384 —è–¥–µ—Ä CUDA",
                "price": 189990,
                "stock": 5,
                "category": "gpu",
                "specifications": {
                    "memory": "24 –ì–ë GDDR6X",
                    "memory_bus": "384-bit",
                    "cuda_cores": 16384,
                    "base_clock": "2.23 –ì–ì—Ü",
                    "boost_clock": "2.52 –ì–ì—Ü",
                    "tbp": "450 –í—Ç"
                }
            },
            {
                "name": "ASUS ROG Strix Z790-E",
                "description": "LGA 1700, DDR5, PCIe 5.0, Wi-Fi 6E",
                "price": 34990,
                "stock": 20,
                "category": "motherboard",
                "specifications": {
                    "socket": "LGA 1700",
                    "chipset": "Intel Z790",
                    "form_factor": "ATX",
                    "memory_slots": 4,
                    "max_memory": "128 –ì–ë DDR5",
                    "m2_slots": 4
                }
            },
            {
                "name": "Kingston Fury Beast 32GB DDR5",
                "description": "32GB (2x16GB) DDR5 6000MHz CL36",
                "price": 14990,
                "stock": 30,
                "category": "ram",
                "specifications": {
                    "type": "DDR5",
                    "capacity": "32 –ì–ë (2x16)",
                    "speed": "6000 –ú–ì—Ü",
                    "latency": "CL36",
                    "voltage": "1.35 –í"
                }
            },
            {
                "name": "Samsung 980 Pro 2TB",
                "description": "PCIe 4.0 NVMe SSD, —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –¥–æ 7000 –ú–ë/—Å",
                "price": 17990,
                "stock": 25,
                "category": "ssd",
                "specifications": {
                    "interface": "PCIe 4.0 x4",
                    "capacity": "2 –¢–ë",
                    "read_speed": "7000 –ú–ë/—Å",
                    "write_speed": "5100 –ú–ë/—Å",
                    "tbw": "1200 –¢–ë"
                }
            },
            {
                "name": "Be Quiet! Dark Power 13 1000W",
                "description": "–ú–æ–¥—É–ª—å–Ω—ã–π –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è 80+ Titanium",
                "price": 24990,
                "stock": 15,
                "category": "psu",
                "specifications": {
                    "wattage": "1000 –í—Ç",
                    "efficiency": "80+ Titanium",
                    "modular": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –º–æ–¥—É–ª—å–Ω—ã–π",
                    "connectors": "2x EPS, 6x PCIe"
                }
            },
            {
                "name": "NZXT H9 Flow",
                "description": "–ö–æ—Ä–ø—É—Å Mid-Tower —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º —Å—Ç–µ–∫–ª–æ–º",
                "price": 15990,
                "stock": 18,
                "category": "cases",
                "specifications": {
                    "type": "Mid-Tower",
                    "motherboard": "ATX, Micro-ATX, Mini-ITX",
                    "fans": "3x 120mm –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                    "radiator_support": "360mm"
                }
            },
            {
                "name": "Noctua NH-D15",
                "description": "–¢–æ–ø–æ–≤—ã–π –±–∞—à–µ–Ω–Ω—ã–π –∫—É–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
                "price": 8990,
                "stock": 22,
                "category": "cooling",
                "specifications": {
                    "type": "–í–æ–∑–¥—É—à–Ω–æ–µ",
                    "socket": "LGA1700, AM5, AM4",
                    "tpd": "250 –í—Ç",
                    "noise": "24.6 –¥–ë"
                }
            },
            {
                "name": "Samsung Odyssey G9",
                "description": "49-–¥—é–π–º–æ–≤—ã–π –∏–∑–æ–≥–Ω—É—Ç—ã–π –∏–≥—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä",
                "price": 89990,
                "stock": 8,
                "category": "monitors",
                "specifications": {
                    "size": "49 –¥—é–π–º–æ–≤",
                    "resolution": "5120x1440",
                    "refresh_rate": "240 –ì—Ü",
                    "panel": "QLED"
                }
            }
        ]

        for prod_data in products_data:
            category = next((c for c in categories if c.slug == prod_data["category"]), None)
            if category:
                product = Product(
                    name=prod_data["name"],
                    description=prod_data["description"],
                    price=prod_data["price"],
                    stock=prod_data["stock"],
                    category_id=category.id,
                    specifications=prod_data["specifications"],
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                db.session.add(product)

        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {Product.query.count()} —Ç–æ–≤–∞—Ä–æ–≤")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...")
        customers = [customer1, customer2]
        products = Product.query.all()
        statuses = ['pending', 'completed', 'cancelled']

        for i in range(10):  # –°–æ–∑–¥–∞–¥–∏–º 10 –∑–∞–∫–∞–∑–æ–≤
            customer = random.choice(customers)
            order_date = datetime.utcnow() - timedelta(days=random.randint(1, 30))

            order = Order(
                user_id=customer.id,
                total=0,
                address=f"—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. {i + 1}, –∫–≤. {i + 10}",
                phone=customer.phone,
                status=random.choice(statuses),
                created_at=order_date,
                notes=f"–ó–∞–∫–∞–∑ ‚Ññ{i + 1} –¥–ª—è {customer.first_name} {customer.last_name}"
            )
            db.session.add(order)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            order_items = []
            order_total = 0
            num_items = random.randint(1, 5)  # –û—Ç 1 –¥–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ

            for _ in range(num_items):
                product = random.choice(products)
                quantity = random.randint(1, 3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                if product.stock < quantity:
                    quantity = product.stock

                if quantity > 0:
                    order_item = OrderItem(
                        order_id=order.id,
                        product_id=product.id,
                        quantity=quantity,
                        price=product.price
                    )
                    order_total += product.price * quantity
                    db.session.add(order_item)
                    order_items.append(order_item)

                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
                    product.stock -= quantity

            order.total = order_total
            db.session.commit()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {Order.query.count()} –∑–∞–∫–∞–∑–æ–≤")
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")


if __name__ == '__main__':
    seed_database()